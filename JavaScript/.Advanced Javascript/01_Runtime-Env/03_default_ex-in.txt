----- Default Exports and Imports -----
So far, the examples shown have used the named export syntax, in which a moduleâ€™s 
resources are exported individually by name. Every module also has the option to export a
 single value to represent the entire module called the default export. Often, though not 
 always, the default export value is an object containing the entire set of functions and/
 or data values of a module.


The syntax for exporting a default object looks like this:

const resources = { 
  valueA, 
  valueB 
}
export { resources as default };


You may also see this shorthand syntax where the value follows export default is the 
default value to be exported:

const resources = {
  valueA,
  valueB
}
export default resources;



----- Importing default values. -----
    This can work in sedveral ways, when imorting from default export
	
i. import { default as resources } from 'module.js;
ii. import domFunctions from '../modules/dom-functions.js';

const { toggleHiddenElement, changeToFunkyColor } = domFunctions;

const buttonElement = document.getElementById('secret-button');
const pElement = document.getElementById('secret-p');

buttonElement.addEventListener('click', () => {
  toggleHiddenElement(pElement);
  changeToFunkyColor(buttonElement);
});





REVIEW
In this article, you have learned the following:

The benefits of implementing modular programs.
How to use the ES6 export statement to export code from a file - meaning its functions and/or data can be used by other files/modules.
How to use the ES6 import statement to import functions and/or data from another module.
How to rename imported resources using the as keyword.
How to export and import a default value