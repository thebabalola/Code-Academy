/* Where Flexbox is mostly useful for positioning items in a one-dimensional layout,
	 CSS grid is most useful for two-dimensional layouts 
*/


/* Creating grid 
To set up a grid, you need to have both a;
	- grid container and 
	- grid items

	grid container: display grid (for block level grid), or
				 	inline-grid (for an inline grid)
*/

.grid {
  border: 2px blue solid;
  width: 400px;
  height: 500px;
  display:grid;
}

.box {
  background-color: beige;
  color: black;
  border-radius: 5px;
  border: 2px dodgerblue solid;
}



/* Creating Columns 
By default, grids contain only one column - just like seen in the above

To change this, we need to explicitly define the number of rows and columns in our grid.
	-using 'grid-template-columns' - usually follows the display grid
*/

.grid-column {
	border: 2px blue solid;
	width: 400px;
	height: 500px;
	display:grid;
	grid-template-columns: 100px 50% 200px;  /*This defines 3 colums, with their size*/
  }
  
  .boxes {
	background-color: beige;
	color: black;
	border-radius: 5px;
	border: 2px dodgerblue solid;
  }



/* Creating Rows 
Just like colums, there is row
*/
.grid-row {
	border: 2px blue solid;
	width: 400px;
	height: 500px;
	display:grid;
	grid-template-rows: 40% 50% 50px;  /*This defines 3 colums, with their size*/
  }
  
  .boxer {
	background-color: beige;
	color: black;
	border-radius: 5px;
	border: 2px dodgerblue solid;
  }



/* Grid templates
replace the previous two CSS properties. Both grid-template-rows and grid-template-columns
*/
.grid-template {
	border: 2px blue solid;
	width: 400px;
	height: 500px;
	display:grid;
	grid-template: 100px 50% 200px / 40% 50% 50px;  /*The one before the lash is row, and the one after column*/
  }
  
  .boks {
	background-color: beige;
	color: black;
	border-radius: 5px;
	border: 2px dodgerblue solid;
  }



/* Fraction */
.grid-fraction {
	border: 2px blue solid;
	height: 500px;
	width: 400px;
	display:grid;
	grid-template: 1fr 1fr 1fr / 3fr 50% 1fr;  /*The one before the lash is row, and the one after column*/
  } 			/*167px 167% 167px / 150% 50% 50px;   - what the above interprets too*/ 
  
  .booking {
	background-color: beige;
	color: black;
	border-radius: 5px;
	border: 2px dodgerblue solid;
  }

 /*
 The rows are splitting up the available 400 pixels of height into four parts. 
 The first row gets two of those parts, the second row gets one, and the third row gets one. 
 Therefore the first row is 167 pixels tall, and the second is 167px and third rows are 167 pixels tall.

Each columnâ€™s width is a fraction of the available space. In this case, the 
available space is split into five parts. The first column gets three-fourth of the space, 
the second column gets 50% of the grid, and the last column gets one-fourth. 
Since the total width is 500 pixels, this means that the columns will 
have widths of 150 pixels, 200 pixels, and 50 pixels respectively.
*/

.grid {
	display: grid;
	width: 100px;
	grid-template-columns: 1fr 60px 1fr;
  }
/*
60 pixels are taken up by the second column. Therefore the first and third columns 
have 40 available to split between them. Since each gets one fraction of the total, 
they both end up being 20 pixels wide (from the total width of 100px).
*/



/* --- Repeat --- 
	The repeat() function will duplicate the specifications for rows or columns a 
	given number of times.
	It is particular useful for fractions taking the same sizes repeat(3, 1fr).
*/

.sample{
	display: grid;
	width:600px;
	height: 400px;
	grid-template-columns: repeat(3, 200px);  /*this = 200px 200px 200px (of space to be taken)*/
	grid-template-rows: repeat(2, 20px 50px); 
}   /*This code will create four columns where the first and third columns will
	 be 20 pixels wide and the second and fourth will be 50 pixels wide.*/



.repeat {
  display: grid;
  border: 2px blue solid;
  width: 400px;
  height: 500px;
  grid-template-columns: repeat(3, 1fr) / 3fr 50% 1fr;
}

.buks {
  background-color: beige;
  color: black;
  border-radius: 5px;
  border: 2px dodgerblue solid;
}




/* --- MinMax ---- 

 in the previous examples, the grids has been 400 pixels wide and 500 pixels tall. 
 But sometimes you might want a grid to resize based on the size of your web browser.
*/

.minmax {
	display: grid;
	grid-template-columns: 100px minmax(100px, 500px) 100px;
  }		/*i.e the first and third columns will always be 100 pixels wide, 
  		no matter the size of the grid. The second column, however, will vary 
		in size as the overall grid resizes. The second column will always be 
		between 100 and 500 pixels wide.*/

.minmat {
  display: grid;
  border: 2px blue solid;
  /* width: 400px; */
  height: 500px;
  grid-template: repeat(3, 1fr) / 3fr minmat(50px 300px) 1fr;
  gap: 20px, 5px;  /*or column-gap: 20px	row-gap:5px*/
}

.buk {
  background-color: beige;
  color: black;
  border-radius: 5px;
  border: 2px dodgerblue solid;
}



/* ---- Grid-gap ----
	row-gap and column-gap will put blank space between every row and column in the grid.
*/

.grid-gap {
  display: grid;
  border: 2px blue solid;
  /* width: 400px; */
  height: 500px;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: 3fr minmat(50px 300px) 1fr;
  column-gap: 20px;
  row-gap: 5px;
}




/* 
----- GRID-ITEM  -----
When explicitly defining a grid, you have to declare the quantity of rows
and columns and their respective sizes.

- in all of our examples, the items placed in the grid have always taken up 
	exactly one square. This does not always need to be the case; we can 
	drastically change the look of our grid by making grid items take up 
	more than one row and one column.
*/


/* Multiple Row Items 
	Row grid lines and column grid lines start at 1 and end at a value that
	s 1 greater than the number of rows or columns the grid has

	if a grid has 5 rows, the grid row lines range from 1 to 6. If a grid 
	has 8 rows, the grid row lines range from 1 to 9.
*/


.grids {
	display: grid;
	border: 2px blue solid;
	height: 500px;
	width: 500px;
	grid-template: repeat(4, 1fr 2fr) / repeat(4, 3fr 2fr);
	gap: 5px;
  }
  
  .a {
	grid-row-start: 5; /* value for grid-row-start should be the row at which you want the grid item to begin*/
  	grid-row-end: 7;	/*The value for grid-row-end should be one greater than the row at which you want the grid item to end.*/
  }						/* An element that covers rows 2, 3, and 4 should have these
  						 declarations: grid-row-start: 2 and grid-row-end: 5.*/

	.b {
	grid-row: 4 / 6; /* works same as the above*/
  }

  /*---columns---*/
  .c {
	grid-column-start: 5; /* value for grid-row-start should be the row at which you want the grid item to begin*/
  	grid-column-end: 7;	/*The value for grid-row-end should be one greater than the row at which you want the grid item to end.*/
  }

  .d{
	grid-column: 4 / span 2; /* wteels the grid to start from 4 and take 2 more space*/
  }

  /*mixed rows and colums*/
  .d {
	grid-row: 5 / 7;
  	grid-column-start: 1;
  	grid-column-end: 3;   /*combines both row and colum */
  }
  
  .f {  
	grid-row: 2 / span 3;
	grid-column: 2 / span 6;
  }

  /* ---- GRID AREA ----
  	. grid-row-start
	. grid-column-start
	. grid-row-end
	. grid-column-end 
  */
  .a {
	grid-area: 5 / 1 / span 2 / span 2;
  }
  
  .b {  
	grid-area: 2 / 2 / span 3 / span 6; /*grid-row-start, grid-column-start, grid-row-end, grid-column-end */
  }
  
  .c {
	grid-area: 6 / 8 / span 3 / span 1;
  }

  .boxx {
	background-color: beige;
	color: black;
	border-radius: 5px;
	border: 2px dodgerblue solid;
  }




  
  /* Practice */
.grid-practice {
  border: 2px blue solid;
  height: 500px;
  width: 500px;
  display: grid;
  grid-template-columns: 1fr 1fr 2fr 1fr; /* Use consistent units */
  grid-template-rows: 200px 200px;
  gap: 10px 15px;
}

.a{
  grid-column-start: 1 ;
  grid-column-end: span 2;
  grid-row: 1 / 3;
}

.boxp {
  background-color: beige;
  color: black;
  border-radius: 5px;
  border: 2px dodgerblue solid;
}